basic concepts

Getting Familiar with Socket Programming in C

Server Side Workflow using following functions.(sys/socket.h) Program compilation occurs in Linux env

# Socket() Function : Which is used to craete a socket object with TCP Stream for communication.
# Bind() Function : Which is used to bind the host to particular IP and Port. Before declaring the bind fucntion have to declare a structure.
# Listen() Fucntion : Which is used to listen the incoming connection using IP/Port.
# Accept() Function : Which is used to accept the connection that meet the requirements.
# Send() and Recv() : Which used to send and receive the data streams between client and the server.

Client Side Workflow using following function. (winsock2.h) Progarm compilation occurs in Windows Env.
(If you need to compile the client side code in linux env `sys/socket.h` header is capable.)

Difference (sys/socket.h / winsock2.h) => The workflow is same in both libaries but the syntax is different in both libararies.

# Socket() Function : Create a socket for communication.
# Connect() Function : Used to connect with the target.
# Send() and Recv() : Request And Response between Client and server.


1. All works coorectly but windows defender found the compiled version of the program as malicious and it not allowed to execute in the client environment.

Compile the socket program as mentioned below
`gcc [program] -o [executable_name] -Wno-implicit`

Compile the client_soc program as mentioned below
`x86_64-w64-mingw32-gcc client_soc.c -o client.exe -lws2_32`

2. Reverse Shell works perfectly while assining the correct IP and target port of attacker machine.

Lesson > gcc also create a executable for windows while specifying the correct and linked libraries.
        specify `-w` option while compiling the program to remove potencial warning messages.
        defender not detecting while testing the reverse shell.


3. Before program understand the main concepts of function that we are using while shell code execution.
 VirtualAlloc() - Used for allocating memory in the process.
 RtlMoveMemory() - Copies a block of memory to a destination memory (Will be use to move the shellcode to allocated memory buffer.)
 CreateThread() - Execute a certain piece of the code.(will be used to create a thread in the program to execute the shell code.)

        After compiled the shellcode execution the executable can be easily detectable by windows defender.
        Turn off the windows security and try it out.

        Let's Debug the shellcode program and analze the working principles.(x64dbg)


4. Before program understand the most used function principles in RPI(Remote process injection.)
RPI - Basically injecting the dll or shellcode in a remote process instead of injecting it to a local process.
        OpenProcess() - Retrive a handle to a remote process.
        VirtualAllocEx() - allocating the memory in the remote process.
        WriteProcessMemory() - cpoies the buffer from from source to destination.
        CreateRemoteThred() - Create a thread in a remote process to execute the shellcode.

        Lesson - process reverse shell injection is very impactful. but windows defender easily find it.

 
 5.
 if Sedebugpriviledge enabled - Allows a process to inspect and adjust the memory of the other process.


        
